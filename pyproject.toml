[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "discord.py"
description = "A Python wrapper for the Discord API"
readme = { file = "README.rst", content-type = "text/x-rst" }
license = { file = "LICENSE" }
requires-python = ">=3.8"
authors = [{ name = "Rapptz" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version", "dependencies"]

[project.urls]
Documentation = "https://discordpy.readthedocs.io/en/latest/"
"Issue tracker" = "https://github.com/Rapptz/discord.py/issues"

[tool.setuptools.dynamic]
dependencies = { file = "requirements.txt" }

[project.optional-dependencies]
voice = ["PyNaCl>=1.3.0,<1.6"]
docs = [
    "sphinx==4.4.0",
    "sphinxcontrib_trio==1.1.2",
    # TODO: bump these when migrating to a newer Sphinx version
    "sphinxcontrib-websupport==1.2.4",
    "sphinxcontrib-applehelp==1.0.4",
    "sphinxcontrib-devhelp==1.0.2",
    "sphinxcontrib-htmlhelp==2.0.1",
    "sphinxcontrib-jsmath==1.0.1",
    "sphinxcontrib-qthelp==1.0.3",
    "sphinxcontrib-serializinghtml==1.1.5",
    "typing-extensions>=4.3,<5",
    "sphinx-inline-tabs==2023.4.21",
]
speed = [
    "orjson>=3.5.4",
    "aiodns>=1.1",
    "Brotli",
    "cchardet==2.1.7; python_version < '3.10'",
]
test = [
    "coverage[toml]",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "typing-extensions>=4.3,<5",
    "tzdata; sys_platform == 'win32'",
]

[tool.setuptools]
packages = [
    "discord",
    "discord.types",
    "discord.ui",
    "discord.webhook",
    "discord.app_commands",
    "discord.ext.commands",
    "discord.ext.tasks",
]
include-package-data = true

[tool.ruff]
include = ["discord/**"]
extend-exclude = ["docs", "tests", "examples"]
line-length = 125
target-version = "py38"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "EM",
    "ISC",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ERA",
    "PD",
    "PL",
    "TRY",
    "NPY",
    "RUF",
]
extend-ignore = [
    "S101", # Use of assert here is a known quantity. Blame typing memes.
    # "PLR2004", # Magic value comparison. May remove later.
    "SIM105", # Suppressable exception. I'm not paying the overhead of contextlib.suppress for stylistic choices.
    "C90",    # McCabe complexity memes.
    "PD011",  # Erroneous issue that triggers for any .values attribute access at all.
    "S311",   # No need for cryptographically secure random number generation in this use case.
    "ANN101", # Type of self is implicit.
    "ANN102", # Type of cls is implicit.
    "ANN204", # Special method return types are known by type checker.
    "ANN401", # Not sure how else to type *args and **kwargs when they could be anything.
    "PLR",    # Complexity things.
    "PYI036", # Bug with annotations for __exit__.
    # Recommended by Ruff when using Ruff format.
    "E111",
    "E114",
    "E117",
    "Q003",
    "COM812",
    "COM819",
    "E501",
    "ISC001",
    "ISC002",
    # For messages in exception calls.
    "TRY003",
    "EM101",
    "EM102",
    # Leave simple if-else or if-elif blocks that return or assign.
    "SIM108",
    "RET505",
    # Leave lambdas.
    "E731",
    # Leave certain unicode characters in docstrings.
    "RUF002",
    # Allow catching of blind exceptions
    "BLE001",
    # Assume current try-except-pass patterns don't need logging.
    "S110",
    # Shadowing of builtins.
    "A001",
    "A002",
]
unfixable = [
    "ERA", # I don't want anything erroneously detected deleted by this.
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403", "PLC0414"] # Star import usually throws these.

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "preserve"

[tool.pyright]
include = [
    "discord",
    "discord/app_commands",
    "discord/types",
    "discord/ui",
    "discord/ext",
    "discord/ext/commands",
    "discord/ext/tasks",
]
exclude = ["**/__pycache__", "build", "dist", "docs"]
pythonVersion = "3.8"
typeCheckingMode = "strict"

reportPrivateUsage = "none"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportPropertyTypeMismatch = "warning"
enableExperimentalFeatures = true

[tool.coverage.run]
omit = ["discord/__main__.py", "discord/types/*", "*/_types.py"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload"]

[tool.pytest.ini_options]
asyncio_mode = "strict"
